name: Build/Test

on:
  push: ~
  pull_request: ~
  workflow_dispatch: ~

env:
  BUILD_TYPE: Release
  SOURCE_DIR: ${{github.workspace}}
  BUILD_DIR: ${{github.workspace}}/build
  CONAN_USER_HOME: ${{ github.workspace }}/.conan/
  # The short paths feature breaks caching.
  CONAN_USER_HOME_SHORT: None
  QT_VERSION: 6.6.*
  # Increment when the cache must be invalidated.
  CACHE_IX: 0

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-13
          - windows-2022
          - ubuntu-22.04
    runs-on: ${{matrix.os}}
    steps:
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      - name: Set CMake Parallel level
        run: |
          echo "CMAKE_BUILD_PARALLEL_LEVEL=${{ steps.cpu-cores.outputs.count }}" >> ${GITHUB_ENV}
          echo "CTEST_PARALLEL_LEVEL=1" >> ${GITHUB_ENV}
      # See https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      #######################
      # BUILD
      #######################
      - uses: actions/checkout@v4
      - name: Create Build Environment
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # Telling cmake to make the directory adapts the different syntax for each platform
        run: cmake -E make_directory "${BUILD_DIR}"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install System Packages (macOS)
        if: ${{runner.os == 'macOS'}}
        run: brew install pandoc
      - name: Install System Packages (Windows)
        if: ${{runner.os == 'Windows'}}
        run: |
          choco install pandoc -y --ia=ALLUSERS=1
          refreshenv
      - name: Install System Packages (Linux)
        if: ${{runner.os == 'Linux'}}
        run: |
          sudo apt-get update
          sudo apt-get -y install libcurl4-openssl-dev pandoc qtbase5-dev libqt5svg5-dev qttools5-dev
      - name: Install Qt
        # Don't need this on Linux, as Qt will come from the system package manager above
        if: ${{runner.os != 'Linux'}}
        uses: jurplel/install-qt-action@v3
        with:
          dir: ${{github.workspace}}/.qt
          version: ${{env.QT_VERSION}}
          cache: true
      - name: Cache web ui deps
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/mobile_sacn_webui/node_modules
          key: ${{env.CACHE_IX}}-${{runner.os}}-webui-${{hashfiles('**/package-lock.json')}}
      - name: Configure CMake
        shell: bash
        run: cmake -S "${SOURCE_DIR}" -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_TESTING=On -DBUILD_PACKAGE=On -DSENTRY_DSN="${{secrets.SENTRY_DSN}}"
      - name: Build
        shell: bash
        run: cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE}

      #######################
      # TEST
      #######################
#      - name: Test
#        working-directory: ${{env.BUILD_DIR}}
#        shell: bash
#        run: ctest -C ${BUILD_TYPE}
#      - name: Upload test results
#        uses: actions/upload-artifact@v3
#        if: ${{ failure() }}
#        with:
#          name: test_results_${{runner.os}}
#          path: ${{env.BUILD_DIR}}/Testing/Temporary/LastTest.log

      #######################
      # PACKAGE
      #######################
      - name: Package (macOS)
        if: ${{runner.os == 'macOS'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "DragNDrop" -B "${BUILD_DIR}/packages"
      - name: Package (Windows)
        if: ${{runner.os == 'Windows'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "ZIP;WIX" -B "${BUILD_DIR}/packages"
      - name: Package (Linux)
        if: ${{runner.os == 'Linux'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "TGZ;DEB" -B "${BUILD_DIR}/packages"
      - name: Upload failed package artifacts
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: failed_package_${{runner.os}}
          path: ${{env.BUILD_DIR}}/packages
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: ${{env.BUILD_DIR}}/packages/*.*
          if-no-files-found: error

  #######################
  # RELEASE
  #######################
  release:
    needs:
      - build
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: repo
      - name: Get built packages
        uses: actions/download-artifact@v4
        id: download
        with:
          name: packages
          path: packages
      - name: Load signing key
        run: echo "${{ secrets.DSA_PRIVATE_KEY }}" > ${{github.workspace}}/dsa_priv.pem
      - name: Determine channel
        id: channel
        uses: dkershner6/switch-case-action@v1
        with:
          default: "dev"
          conditionals-with-values: |
            ${{ startsWith(github.ref_name, 'v') }} => main
      - name: Build manifest
        working-directory: ${{steps.download.outputs.download-path}}
        run: python3 ${{ github.workspace }}/repo/scripts/create_release_manifest.py --dsa_key "${{ github.workspace }}/dsa_priv.pem" "${{ github.ref_name }}" "${{ steps.channel.outputs.value }}" "${{ steps.download.outputs.download-path }}/manifest.json"
      - name: Release (dev build)
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ steps.channel.outputs.value != 'main' }}
          draft: true
          tag_name: ${{ github.ref_name }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: ${{steps.download.outputs.download-path}}/*

  #######################
  # APT REPOSITORY
  #######################
  apt:
    needs:
      - build
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    env:
      S3FS_PASSWD_PATH: ${{ github.workspace }}/.passwd-s3fs
      APT_REPO_LOCAL_PATH: ${{ github.workspace }}/msacn-apt
    steps:
      - name: Set env vars
        run: |
          echo "APT_DEBS_PATH=${APT_REPO_LOCAL_PATH}/pool" >> ${GITHUB_ENV}
          echo "APT_META_PATH=${APT_REPO_LOCAL_PATH}/dists/stable/main/binary-$(dpkg --print-architecture)" >> ${GITHUB_ENV}
      - uses: actions/checkout@v3
        with:
          path: repo
      - name: Get built packages
        uses: actions/download-artifact@v3
        id: download
        with:
          name: packages
          path: packages
      - name: Install System Packages
        run: |
          sudo apt-get update
          sudo apt-get -y install dpkg-dev gpg s3fs
      - name: Import repository key
        id: apt_key
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.APT_REPO_PRIVATE_KEY }}
      - name: Setup credentials
        run: |
          echo ${{ secrets.AWS_ACCESS }}:${{ secrets.AWS_SECRET }} > ${S3FS_PASSWD_PATH}
          chmod 600 ${S3FS_PASSWD_PATH}
          mkdir -p ${APT_REPO_LOCAL_PATH}
      - name: Mount repo
        run: s3fs msacn-apt ${APT_REPO_LOCAL_PATH} -o passwd_file=${S3FS_PASSWD_PATH} -o url=${{ secrets.AWS_ENDPOINT }} -o default_acl=public-read
      - name: Create directories
        run: |
          mkdir -p ${APT_DEBS_PATH}/main/
          mkdir -p ${APT_META_PATH}
      - name: Copy new packages
        run: cp -v  ${{steps.download.outputs.download-path}}/*.deb ${APT_DEBS_PATH}/main/
      - name: Generate repo metadata
        working-directory: ${{ env.APT_REPO_LOCAL_PATH }}
        # The outputs are first made to a temporary location to avoid unsupported incremental writes to S3 storage.
        run: |
          dpkg-scanpackages --arch $(dpkg --print-architecture) --multiversion pool > ${{ runner.temp }}/Packages
          gzip --stdout ${{ runner.temp }}/Packages > ${{ runner.temp }}/Packages.gz
          mv ${{ runner.temp }}/Packages ${{ runner.temp }}/Packages.gz ${APT_META_PATH}/
          python3 ${{ github.workspace }}/repo/scripts/apt_release.py ${{ steps.apt_key.outputs.keyid }}
