name: CI

on:
  push: ~
  pull_request: ~
  workflow_dispatch: ~

env:
  BUILD_TYPE: Release
  SOURCE_DIR: ${{github.workspace}}
  BUILD_DIR: ${{github.workspace}}/build
  CONAN_USER_HOME: ${{ github.workspace }}/.conan/
  QT_VERSION: 5.15.2
  # Increment when the cache must be invalidated.
  CACHE_IX: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - windows-2022
          - ubuntu-20.04
    runs-on: ${{matrix.os}}
    steps:
      #######################
      # BUILD
      #######################
      - uses: actions/checkout@v3
      - name: Create Build Environment
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # Telling cmake to make the directory adapts the different syntax for each platform
        run: cmake -E make_directory "${BUILD_DIR}"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install System Packages (macOS)
        if: ${{runner.os == 'macOS'}}
        run: brew install pandoc
      - name: Install System Packages (Windows)
        if: ${{runner.os == 'Windows'}}
        run: |
          choco install pandoc -y --ia=ALLUSERS=1
          refreshenv
      - name: Install System Packages (Linux)
        if: ${{runner.os == 'Linux'}}
        run: |
          sudo apt-get update
          sudo apt-get -y install pandoc qtbase5-dev libqt5svg5-dev
      - name: Cache Qt
        id: cache-qt
        # Don't need this on Linux, as Qt will come from the system package manager above
        if: ${{runner.os != 'Linux'}}
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/.qt
          key: ${{env.CACHE_IX}}-${{runner.os}}-QtCache-${{env.QT_VERSION}}
      - name: Install Qt
        # Don't need this on Linux, as Qt will come from the system package manager above
        if: ${{runner.os != 'Linux'}}
        uses: jurplel/install-qt-action@v2
        with:
          dir: ${{github.workspace}}/.qt
          version: ${{env.QT_VERSION}}
          setup-python: false
          cached: ${{steps.cache-qt.outputs.cache-hit}}
      - name: Setup Conan
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install conan
          conan profile new --detect --force default
      - name: Set libstdc++ ABI
        if: ${{runner.os == 'Linux'}}
        run: conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: Install dependencies
        shell: bash
        run: conan install . --profile=default --install-folder=${BUILD_DIR} --build=missing
      - name: Cache web ui deps
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/mobile_sacn_webui/node_modules
          key: ${{env.CACHE_IX}}-${{runner.os}}-webui-${{hashfiles('**/package-lock.json')}}
      - name: Configure CMake
        shell: bash
        run: cmake -S "${SOURCE_DIR}" -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_TESTING=On
      - name: Build
        shell: bash
        run: cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE}

      #######################
      # TEST
      #######################
      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: ctest -C ${BUILD_TYPE}
      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: test_results
          path: ${{env.BUILD_DIR}}/Testing/Temporary/LastTest.log

      #######################
      # PACKAGE
      #######################
      - name: Package prep
        shell: bash
        run: |
          cmake -DBUILD_PACKAGE=On -DBUILD_TESTING=Off "${BUILD_DIR}"
          cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE}
      - name: Package (macOS)
        if: ${{runner.os == 'macOS'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "DragNDrop" -B "${BUILD_DIR}/packages"
      - name: Package (Windows)
        if: ${{runner.os == 'Windows'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "ZIP;WIX" -B "${BUILD_DIR}/packages"
      - name: Package (Linux)
        if: ${{runner.os == 'Linux'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "TGZ;DEB" -B "${BUILD_DIR}/packages"
      - name: Upload failed package artifacts
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: failed_package_${{runner.os}}
          path: ${{env.BUILD_DIR}}/packages
      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: ${{env.BUILD_DIR}}/packages/mobile_sacn-*.*
          if-no-files-found: error

  release:
    needs:
      - build
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Get built packages
        uses: actions/download-artifact@v3
        id: download
        with:
          name: packages
          path: packages
      - name: Get current timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date --utc)"
      - name: Release (dev build)
        uses: softprops/action-gh-release@v1
        with:
          name: Latest dev build
          prerelease: true
          tag_name: dev-latest
          fail_on_unmatched_files: true
          body: Last updated ${{steps.timestamp.outputs.timestamp}}.
          files: ${{steps.download.outputs.download-path}}/*
      - name: Rebuild site
        env:
          GITHUB_TOKEN: ${{ secrets.SITE_GH_API_TOKEN }}
        run: gh workflow --repo danielskeenan/mobile_sacn_site run main.yml --ref main

  apt:
    needs:
      - build
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    env:
      S3FS_PASSWD_PATH: ${{ github.workspace }}/.passwd-s3fs
      APT_REPO_LOCAL_PATH: ${{ github.workspace }}/msacn-apt
    steps:
      - name: Set env vars
        run: |
          echo "APT_DEBS_PATH=${APT_REPO_LOCAL_PATH}/msacn-apt/pool" >> ${GITHUB_ENV}
          echo "APT_META_PATH=${APT_REPO_LOCAL_PATH}/msacn-apt/dists/stable/main/binary-$(dpkg --print-architecture)" >> ${GITHUB_ENV}
      - uses: actions/checkout@v3
        with:
          path: repo
      - name: Get built packages
        uses: actions/download-artifact@v3
        id: download
        with:
          name: packages
          path: packages
      - name: Install System Packages
        run: |
          sudo apt-get update
          sudo apt-get -y install dpkg-dev gpg s3fs
      - name: Setup credentials
        run: |
          echo ${{ secrets.AWS_ACCESS }}:${{ secrets.AWS_SECRET }} > ${S3FS_PASSWD_PATH}
          chmod 600 ${HOME}/.passwd-s3fs
          mkdir -p ${APT_REPO_LOCAL}
      - name: Mount repo
        run: s3fs msacn-apt ${APT_REPO_LOCAL_PATH} -o passwd_file=${S3FS_PASSWD_PATH} -o url=${{ secrets.AWS_ENDPOINT }} -o default_acl=public-read
      - name: Create directories
        run: |
          mkdir -p ${APT_DEBS_PATH}
          mkdir -p ${APT_META_PATH}
      - name: Copy new packages
        run: cp -v  ${{steps.download.outputs.download-path}}/*.deb ${APT_DEBS_PATH}/main/
      - name: Generate repo metadata
        working-directory: ${{ env.APT_REPO_LOCAL_PATH }}
        # The outputs are first made to a temporary location to avoid unsupported incremental writes to S3 storage.
        run: |
          dpkg-scanpackages --arch $(dpkg --print-architecture) ${APT_DEBS_PATH} > ${{ runner.temp }}/Packages
          gzip --stdout ${{ runner.temp }}/Packages > ${{ runner.temp }}/Packages.gz
          mv ${{ runner.temp }}/Packages ${{ runner.temp }}/Packages.gz ${APT_META_PATH}/
          python3 ${{ github.workspace }}/repo/scripts/apt_release.py
