name: Build/Test

on:
  push: ~
  pull_request: ~
  workflow_dispatch: ~

env:
  BUILD_TYPE: Release
  SOURCE_DIR: ${{github.workspace}}
  BUILD_DIR: ${{github.workspace}}/build
  CONAN_USER_HOME: ${{ github.workspace }}/.conan/
  # The short paths feature breaks caching.
  CONAN_USER_HOME_SHORT: None
  CONAN_CMAKE_GENERATOR: Ninja
  QT_VERSION: 6.2.4
  # Increment when the cache must be invalidated.
  CACHE_IX: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - windows-2022
          - ubuntu-20.04
    runs-on: ${{matrix.os}}
    steps:
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores
      - name: Set CMake Parallel level
        run: |
          echo "CMAKE_BUILD_PARALLEL_LEVEL=${{ steps.cpu-cores.outputs.count }}" >> ${GITHUB_ENV}
          echo "CTEST_PARALLEL_LEVEL=1" >> ${GITHUB_ENV}
      #######################
      # BUILD
      #######################
      - uses: actions/checkout@v3
      - name: Create Build Environment
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # Telling cmake to make the directory adapts the different syntax for each platform
        run: cmake -E make_directory "${BUILD_DIR}"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install System Packages (macOS)
        if: ${{runner.os == 'macOS'}}
        run: brew install ninja pandoc
      - name: Install System Packages (Windows)
        if: ${{runner.os == 'Windows'}}
        run: |
          choco install ninja -y
          choco install pandoc -y --ia=ALLUSERS=1
          refreshenv
      - name: Install System Packages (Linux)
        if: ${{runner.os == 'Linux'}}
        run: |
          sudo apt-get update
          sudo apt-get -y install pandoc qtbase5-dev libqt5svg5-dev ninja-build
      - name: Cache Qt
        id: cache-qt
        # Don't need this on Linux, as Qt will come from the system package manager above
        if: ${{runner.os != 'Linux'}}
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/.qt
          key: ${{env.CACHE_IX}}-${{runner.os}}-QtCache-${{env.QT_VERSION}}
      - name: Install Qt
        # Don't need this on Linux, as Qt will come from the system package manager above
        if: ${{runner.os != 'Linux'}}
        uses: jurplel/install-qt-action@v2
        with:
          dir: ${{github.workspace}}/.qt
          version: ${{env.QT_VERSION}}
          setup-python: false
          cached: ${{steps.cache-qt.outputs.cache-hit}}
      - name: Setup Conan
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install conan
          conan profile new --detect --force default
      - name: Set libstdc++ ABI
        if: ${{runner.os == 'Linux'}}
        run: conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: Cache Conan
        uses: actions/cache@v3
        with:
          path: ${{env.CONAN_USER_HOME}}
          key: ${{env.CACHE_IX}}-${{runner.os}}-conan-${{hashfiles('**/conanfile.txt')}}
          restore-keys: |
            ${{env.CACHE_IX}}-${{runner.os}}-conan-
      - name: Install dependencies
        shell: bash
        run: conan install . --profile=default --install-folder=${BUILD_DIR} --build=missing
      - name: Cache web ui deps
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/mobile_sacn_webui/node_modules
          key: ${{env.CACHE_IX}}-${{runner.os}}-webui-${{hashfiles('**/package-lock.json')}}
      - name: Configure CMake
        shell: bash
        run: cmake -G Ninja -S "${SOURCE_DIR}" -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_TESTING=On -DBUILD_PACKAGE=On -DSENTRY_DSN="${{secrets.SENTRY_DSN}}"
      - name: Build
        shell: bash
        run: cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE}

      #######################
      # TEST
      #######################
      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: ctest -C ${BUILD_TYPE}
      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: test_results
          path: ${{env.BUILD_DIR}}/Testing/Temporary/LastTest.log

      #######################
      # PACKAGE
      #######################
      - name: Package (macOS)
        if: ${{runner.os == 'macOS'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "DragNDrop" -B "${BUILD_DIR}/packages"
      - name: Package (Windows)
        if: ${{runner.os == 'Windows'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "ZIP;WIX" -B "${BUILD_DIR}/packages"
      - name: Package (Linux)
        if: ${{runner.os == 'Linux'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "TGZ;DEB" -B "${BUILD_DIR}/packages"
      - name: Upload failed package artifacts
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: failed_package_${{runner.os}}
          path: ${{env.BUILD_DIR}}/packages
      - name: Upload packages
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ${{env.BUILD_DIR}}/packages/*.*
          if-no-files-found: error
